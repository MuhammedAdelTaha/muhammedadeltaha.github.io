<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AI Search Algorithms on Mohamed Adel</title>
    <link>https://muhammedadeltaha.github.io/tags/ai-search-algorithms/</link>
    <description>Recent content in AI Search Algorithms on Mohamed Adel</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 26 Jan 2025 20:18:34 +0200</lastBuildDate>
    <atom:link href="https://muhammedadeltaha.github.io/tags/ai-search-algorithms/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>8 Puzzle AI Solver</title>
      <link>https://muhammedadeltaha.github.io/projects/8-puzzle-ai-solver/</link>
      <pubDate>Sun, 26 Jan 2025 20:18:34 +0200</pubDate>
      <guid>https://muhammedadeltaha.github.io/projects/8-puzzle-ai-solver/</guid>
      <description>Table of Contents&#xD;Link to heading&#xD;Introduction Depth First Search Breadth First Search A* Search with Manhattan heuristic A* Search with Euclidean heuristic Test Cases &amp;amp; Comparisons Observation Demo Video Introduction&#xD;Link to heading&#xD;This project discusses the main differences between the different types of AI Search Algorithms like the completeness and the optimality of the algorithm We used the 8-puzzle problem as an application that demonstrates these differences Depth-First Search&#xD;Link to heading&#xD;Data Structure: Stack Completeness: Not complete Optimality: Not optimal Time: O($ b^m $) Space: O($ b*m $) b is the branching factor m is the maximum possible search tree depth DFS is good only when it comes to space complexity Breadth-First Search&#xD;Link to heading&#xD;Data Structure: Queue Completeness: Complete Optimality: Optimal Time: O($ b^s $) Space: O($ b^s $) b is the branching factor s is the level where the goal state is present BFS is not very well dealt with space BFS can find the optimal solution only if all costs are equal to one A* Search with Manhattan heuristic&#xD;Link to heading&#xD;Data Structure: Priority Queue Completeness: Complete Optimality: Optimal A* Search Always finds the optimal solution A* Search considers the past cost and the upcoming heuristic cost Manhattan distance = $| x_1 - x_2 | + | y_1 - y_2 |$ A* Search with Euclidean heuristic&#xD;Link to heading&#xD;Data Structure: Priority Queue Completeness: Complete Optimality: Optimal A* Search Always finds the optimal solution A* Search considers the past cost and the upcoming heuristic cost Euclidean distance = $\sqrt{ (x_1 - x_2)^2 + (y_1 - y_2)^2 }$ Test Cases &amp;amp; Comparisons&#xD;Link to heading&#xD;Test #1&#xD;Link to heading&#xD;Input: 1 2 3 4 5 6 8 7 0 - Unsolvable test case -</description>
    </item>
    <item>
      <title>Better Understanding of AI Search Algorithms</title>
      <link>https://muhammedadeltaha.github.io/articles/better-understanding-of-ai-search-algorithms/</link>
      <pubDate>Fri, 02 Feb 2024 23:53:51 +0200</pubDate>
      <guid>https://muhammedadeltaha.github.io/articles/better-understanding-of-ai-search-algorithms/</guid>
      <description>Created by the Author with Copilot&#xD;Table of Contents&#xD;Link to heading&#xD;Main Idea Types of AI Search Algorithms Uninformed Search Algorithms Depth-First Search (DFS) Breadth-First Search (BFS) Depth-Limited Search (DLS) Iterative Deepening DFS (ID-DFS) Uniform Cost Search (UCS) Main Idea&#xD;Link to heading&#xD;Let us imagine that Engineers do not yet implement these kinds of algorithms, and we have to think about modeling a life problem into a graph that represents all the states that this problem could be in.</description>
    </item>
  </channel>
</rss>
